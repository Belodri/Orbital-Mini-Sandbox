using System.Runtime.InteropServices.JavaScript;
using System.Text.Json;
using System.Text.Json.Serialization;
using Physics;

namespace Bridge;

internal class Program { private static void Main(string[] args) { } }  // Called while initializing dotnet.js; Don't remove!

[JsonSourceGenerationOptions(GenerationMode = JsonSourceGenerationMode.Metadata)]
[JsonSerializable(typeof(PresetData))]
[JsonSerializable(typeof(PresetSimData))]
[JsonSerializable(typeof(PresetBodyData))]
[JsonSerializable(typeof(PresetBodyData[]))]
partial class PresetJSONSerializerContext : JsonSerializerContext { }

public static partial class EngineBridge
{

    private static readonly PhysicsEngine physicsEngine;
    private static readonly MemoryBufferHandler memoryBufferHandler;

    static EngineBridge()
    {
        physicsEngine = new PhysicsEngine();
        memoryBufferHandler = new MemoryBufferHandler();
    }

    [JSExport]
    public static string? Tick(double timestamp)
    {
        try
        {
            TickData tickData = physicsEngine.Tick(timestamp);
            memoryBufferHandler.WriteTickData(tickData);
            return null;
        }
        catch (Exception e)
        {
            return e.Message;
        }
    }

    [JSExport]
    public static void CreateTestSim(int bodyCount)
    {
        physicsEngine.CreateTestSim(bodyCount);
    }

    [JSExport]
    public static int CreateBody()
    {
        return physicsEngine.CreateBody();
    }

    [JSExport]
    public static string[] GetSimStateLayout() => MemoryBufferHandler.SimStateLayoutArr;

    [JSExport]
    public static string[] GetBodyStateLayout() => MemoryBufferHandler.BodyStateLayoutArr;

    [JSExport]
    public static int[] GetSimBufferPtrAndSize()
    {
        return [
            (int)memoryBufferHandler.SimBufferPtr,
            memoryBufferHandler.SimBufferSizeInBytes,
        ];
    }

    /// <summary>
    /// Serializes the current state of the physics simulation into a JSON string.
    /// </summary>
    /// <returns>
    /// A JSON formatted string representing the current <see cref="PresetData"/>. 
    /// This string can be saved and later loaded using the <see cref="LoadPreset"/> method.
    /// </returns>
    [JSExport]
    public static string GetPreset()
    {
        PresetData data = physicsEngine.GetPresetData();
        return JsonSerializer.Serialize(data, PresetJSONSerializerContext.Default.PresetData);
    }


    /// <summary>
    /// Deserializes a JSON string representing a simulation preset and applies it to the physics engine,
    /// overwriting the current simulation state.
    /// </summary>
    /// <param name="jsonPreset">A string containing the simulation state in JSON format generated by the <see cref="GetPreset"/> method.</param>
    /// <returns>
    /// Returns <c>null</c> if the preset was loaded and applied successfully. 
    /// Otherwise, returns a <c>string</c> containing a descriptive error message if any part of the process fails.
    /// </returns>
    [JSExport]
    public static string? LoadPreset(string jsonPreset)
    {
        try
        {
            PresetData? data = JsonSerializer.Deserialize(
                jsonPreset,
                PresetJSONSerializerContext.Default.PresetData
            );

            if (data == null) return "Failed to load: Preset data was null or empty.";

            TickData tickData = physicsEngine.LoadPreset(data);
            memoryBufferHandler.WriteTickData(tickData);
            return null;
        }
        catch (JsonException e)
        {
            return $"Invalid preset JSON: {e.Message}";
        }
        catch (Exception e)
        {
            return $"Error applying preset: {e.Message}";
        }
    }
}

